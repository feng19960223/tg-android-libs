apply plugin: "com.android.library"
apply plugin: "maven"
apply from: "config.gradle" // 引入config.gradle
android {
    compileSdkVersion configInfo.compileSdkVersion // 编译所依赖的Android SDK的版本
    buildToolsVersion configInfo.buildToolsVersion // 构建该Android工程所用构建工具的版本
    // 默认配置
    defaultConfig {
        minSdkVersion configInfo.minSdkVersion // 最低支持的Android系统的API Level，Android5.0
        targetSdkVersion configInfo.targetSdkVersion // 基于哪个版本开发的
        versionCode configInfo.versionCode // App应用内部版本号
        versionName configInfo.versionName // App应用的版本每次，用户可以看到，就是我们发布的版本
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true //  lombok需要添加该行
                arguments = [AROUTER_MODULE_NAME: project.getName()]  // arouter
            }
        }
        ndk {
            //opencv 没有arm64。 32bit的库文件不能和64bit的库文件不能混合使用。因此，有一种解决办法是过滤掉64bit的库文件，全部使用32bit的库文件
            abiFilters "armeabi", "armeabi-v7a"
        }
    }
    // 用来加载so库
    sourceSets {
        main { // 这里对main SourceSet配置
            jni.srcDirs = [] // jni源集的Java源文件所在目录
            jniLibs.srcDirs = ["libs"] // jniLibs源集的资源文件所在目录
        }
    }
    buildTypes {
        release {
            debuggable false // 是否生产一个可供调试的apk
            jniDebuggable false // 是否生产一个可供调试的Jni(C/C++)代码的apk
            zipAlignEnabled true // Zipalign优化，发布之前一定要进行优化，提高系统和应用的运行效率，更快的读写apk中的资源，降低内存的使用
            shrinkResources false // 移除无用的resource
            minifyEnabled false // 开启混淆,我们新建的工程默认为false，因此，如果我们需要开启混淆的话就需要手动设为true。
            // 这部分有两段，前一段代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，免去了我们很多事，这个文件的目录在/tools/proguard/proguard-android.txt , 后一部分是我们项目里的自定义的混淆文件，目录就在 app/proguard-rules.pro,在这个文件里我们可以声明一些我们所需要的定制的混淆规则。
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}
// 仓库地址
repositories {
    maven { url "file://${configInfo.localRepositoryUrl}"}  //本地Maven仓库地址
    maven { url "http://${configInfo.serverlHost}/repository/maven-public/"}
    google()
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
    // 从api 26开始，support libraries 需要从google的maven仓库下载，所以需要在project的build.gradle中allprojects 添加如下配置即可
    maven { url "https://maven.google.com" }
}
// 打包上传maven
uploadArchives() {
    repositories.mavenDeployer {
        def File propFile = new File("$projectDir/mavenAccount.properties") // 从本地文件读取仓库账号和密码等信息
        if (propFile.canRead()) {
            def Properties props = new Properties()
            props.load(new FileInputStream(propFile))
            println "repoType : " + configInfo.repoType // 发布方式
            if ((configInfo.repoType).equals("remote")) { //发布到远程仓库
                if (props != null && props.containsKey("serverlHostUsername") && props.containsKey("serverlHostPassword")) {
                    def repositoryHost = props["serverlHost"]
                    def repositoryUserName = props["serverlHostUsername"]
                    def repositoryPassword = props["serverlHostPassword"]
                    repository(url:"http://${configInfo.serverlHost}/repository/maven-releases/"){
                        authentication(userName: repositoryUserName, password: repositoryPassword)
                    }
                    println "上传到远程仓库！"
                } else {
                    println "没有发布权限！"
                }
            } else { // 发布到本地仓库
                repository(url: configInfo.localRepositoryUrl)
                println "上传到本地仓库!"
            }
        }
        pom.version = configInfo.versionName
        pom.groupId = configInfo.pomGroupId
        pom.artifactId = configInfo.baseName
    }
}
// 依赖
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation("com.turingoal:tg-common-lib-core-app:" + libVersions.tgCommonLibCoreVersion) {
        transitive = false //关闭依赖传递特性
    }
    implementation 'com.android.support:design:' + libVersions.supportVersion // md风格
    implementation 'com.android.support:appcompat-v7:' + libVersions.supportVersion  // 兼容包
    implementation 'com.android.support:cardview-v7:' + libVersions.supportVersion // cardView
    implementation 'com.android.support.constraint:constraint-layout:' + libVersions.supportConstraintVersion
    implementation 'javax.annotation:javax.annotation-api:' + libVersions.annotationApiVersion // 注解
    implementation 'org.projectlombok:lombok:' + libVersions.lombokVersion // lombok
    implementation 'com.blankj:alog:' + libVersions.alogVersion //  日志
    implementation 'com.blankj:utilcode:' + libVersions.utilcodeVersion //  工具类包
    implementation "com.journeyapps:zxing-android-embedded:" + libVersions.ZXingEmbeddedVersion
    implementation "com.rmtheis:tess-two:" + libVersions.tessTwoVersion // tess-two 文字识别
    // implementation 'com.github.bumptech.glide:glide:' + libVersions.glideVersion // glide图片加载
    // annotationProcessor 'com.github.bumptech.glide:compiler:' + libVersions.glideVersion
    // implementation 'com.lzy.net:okgo:' + libVersions.okgoVersion // okhttp-OkGo
}